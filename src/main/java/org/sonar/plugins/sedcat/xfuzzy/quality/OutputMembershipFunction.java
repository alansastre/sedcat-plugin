//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//                                                      //
// Class:  OutputMembershipFunction                     //
//                                                      //
// Author: Automatically generated by Xfuzzy            //
//                                                      //
// Description: Membership function of an output        //
//              variable                                //
//                                                      //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package org.sonar.plugins.sedcat.xfuzzy.quality;

import org.sonar.plugins.sedcat.strategies.MembershipFunction;

public class OutputMembershipFunction implements MembershipFunction {
 public Conclusion[] conc;
 public double[] input;
 private OperatorSet op;

 public OutputMembershipFunction() {
  this.conc = new Conclusion[0];
 }

 public void set(int size, OperatorSet op, double[] input) {
  this.input = input;
  this.op = op;
  this.conc = new Conclusion[size];
 }

 public void set(int pos, double dg, InputMembershipFunction imf) {
  this.conc[pos] = new Conclusion(dg,imf,op);
 }

 public double compute(double x) {
  double dom = conc[0].compute(x);
  for(int i=1; i<conc.length; i++) dom = op.also(dom,conc[i].compute(x));
  return dom;
 }

 public double defuzzify() {
  return op.defuz(this);
 }

 public double min() {
  return conc[0].min();
 }

 public double max() {
  return conc[0].max();
 }

 public double step() {
  return conc[0].step();
 }

 public boolean isDiscrete() {
  for(int i=0; i<conc.length; i++) if(!conc[i].isSingleton()) return false;
  return true;
 }
 
 public double[][] getDiscreteValues() {
  double[][] value = new double[conc.length][2];
  for(int i=0; i<conc.length; i++) {
   value[i][0] = conc[i].param(0);
   value[i][1] = conc[i].degree();
  }
  return value;
 }

}
