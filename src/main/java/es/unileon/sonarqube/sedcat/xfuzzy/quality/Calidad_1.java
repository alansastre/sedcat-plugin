//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//                                                      //
// Class:  calidad_1                           //
//                                                      //
// Author: Automatically generated by Xfuzzy            //
//                                                      //
// Description: Fuzzy inference engine "calidad_1"       //
//                                                      //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package es.unileon.sonarqube.sedcat.xfuzzy.quality;

public class Calidad_1 implements FuzzyInferenceEngine {

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //  Rulebase RL_Rules1  //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 private MembershipFunction[] RL_Rules1(MembershipFunction Exito, MembershipFunction Cobertura) {
  double _rl;
  double _input[] = new double[2];
  if(Exito instanceof FuzzySingleton)
   _input[0] = ((FuzzySingleton) Exito).getValue();
  if(Cobertura instanceof FuzzySingleton)
   _input[1] = ((FuzzySingleton) Cobertura).getValue();
  OP_calidad_1__default_ _op = new OP_calidad_1__default_();
  OutputMembershipFunction Resultado1 = new OutputMembershipFunction();
  Resultado1.set(25,_op,_input);
  TP_calidad_1_Exito _t_Exito = new TP_calidad_1_Exito();
  TP_calidad_1_Cobertura _t_Cobertura = new TP_calidad_1_Cobertura();
  TP_calidad_1_Resultado1 _t_Resultado1 = new TP_calidad_1_Resultado1();
  int _i_Resultado1=0;
  _rl = _op.and(_t_Exito.muybajo.isEqual(Exito),_t_Cobertura.muybajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.muybajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.muybajo.isEqual(Exito),_t_Cobertura.bajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.muybajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.muybajo.isEqual(Exito),_t_Cobertura.medio.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.muybajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.muybajo.isEqual(Exito),_t_Cobertura.alto.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.muybajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.muybajo.isEqual(Exito),_t_Cobertura.maximo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.bajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.bajo.isEqual(Exito),_t_Cobertura.muybajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.muybajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.bajo.isEqual(Exito),_t_Cobertura.bajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.bajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.bajo.isEqual(Exito),_t_Cobertura.medio.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.bajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.bajo.isEqual(Exito),_t_Cobertura.alto.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.bajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.bajo.isEqual(Exito),_t_Cobertura.maximo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.medio); _i_Resultado1++;
  _rl = _op.and(_t_Exito.medio.isEqual(Exito),_t_Cobertura.muybajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.muybajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.medio.isEqual(Exito),_t_Cobertura.bajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.bajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.medio.isEqual(Exito),_t_Cobertura.medio.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.medio); _i_Resultado1++;
  _rl = _op.and(_t_Exito.medio.isEqual(Exito),_t_Cobertura.alto.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.medio); _i_Resultado1++;
  _rl = _op.and(_t_Exito.medio.isEqual(Exito),_t_Cobertura.maximo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.medio); _i_Resultado1++;
  _rl = _op.and(_t_Exito.alto.isEqual(Exito),_t_Cobertura.muybajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.bajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.alto.isEqual(Exito),_t_Cobertura.bajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.bajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.alto.isEqual(Exito),_t_Cobertura.medio.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.medio); _i_Resultado1++;
  _rl = _op.and(_t_Exito.alto.isEqual(Exito),_t_Cobertura.alto.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.alto); _i_Resultado1++;
  _rl = _op.and(_t_Exito.alto.isEqual(Exito),_t_Cobertura.maximo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.alto); _i_Resultado1++;
  _rl = _op.and(_t_Exito.maximo.isEqual(Exito),_t_Cobertura.muybajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.bajo); _i_Resultado1++;
  _rl = _op.and(_t_Exito.maximo.isEqual(Exito),_t_Cobertura.bajo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.medio); _i_Resultado1++;
  _rl = _op.and(_t_Exito.maximo.isEqual(Exito),_t_Cobertura.medio.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.medio); _i_Resultado1++;
  _rl = _op.and(_t_Exito.maximo.isEqual(Exito),_t_Cobertura.alto.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.alto); _i_Resultado1++;
  _rl = _op.and(_t_Exito.maximo.isEqual(Exito),_t_Cobertura.maximo.isEqual(Cobertura));
  Resultado1.set(_i_Resultado1,_rl, _t_Resultado1.maximo); _i_Resultado1++;
  MembershipFunction[] _output = new MembershipFunction[1];
  _output[0] = Resultado1;
  return _output;
 }

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //  Rulebase RL_Rules2  //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 private MembershipFunction[] RL_Rules2(MembershipFunction ExitCober, MembershipFunction Mutantes) {
  double _rl;
  double _input[] = new double[2];
  if(ExitCober instanceof FuzzySingleton)
   _input[0] = ((FuzzySingleton) ExitCober).getValue();
  if(Mutantes instanceof FuzzySingleton)
   _input[1] = ((FuzzySingleton) Mutantes).getValue();
  OP_calidad_1__default_ _op = new OP_calidad_1__default_();
  OutputMembershipFunction Resultado2 = new OutputMembershipFunction();
  Resultado2.set(25,_op,_input);
  TP_calidad_1_Resultado1 _t_ExitCober = new TP_calidad_1_Resultado1();
  TP_calidad_1_Mutantes _t_Mutantes = new TP_calidad_1_Mutantes();
  TP_calidad_1_Resultado2 _t_Resultado2 = new TP_calidad_1_Resultado2();
  int _i_Resultado2=0;
  _rl = _op.and(_t_ExitCober.muybajo.isEqual(ExitCober),_t_Mutantes.muybajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.muybajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.muybajo.isEqual(ExitCober),_t_Mutantes.bajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.muybajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.muybajo.isEqual(ExitCober),_t_Mutantes.medio.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.muybajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.muybajo.isEqual(ExitCober),_t_Mutantes.alto.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.muybajo.isEqual(ExitCober),_t_Mutantes.maximo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.bajo.isEqual(ExitCober),_t_Mutantes.muybajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.muybajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.bajo.isEqual(ExitCober),_t_Mutantes.bajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.bajo.isEqual(ExitCober),_t_Mutantes.medio.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.bajo.isEqual(ExitCober),_t_Mutantes.alto.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.bajo.isEqual(ExitCober),_t_Mutantes.maximo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.medio); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.medio.isEqual(ExitCober),_t_Mutantes.muybajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.medio.isEqual(ExitCober),_t_Mutantes.bajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.medio.isEqual(ExitCober),_t_Mutantes.medio.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.medio); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.medio.isEqual(ExitCober),_t_Mutantes.alto.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.medio); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.medio.isEqual(ExitCober),_t_Mutantes.maximo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.medio); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.alto.isEqual(ExitCober),_t_Mutantes.muybajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.alto.isEqual(ExitCober),_t_Mutantes.bajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.bajo); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.alto.isEqual(ExitCober),_t_Mutantes.medio.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.medio); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.alto.isEqual(ExitCober),_t_Mutantes.alto.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.alto); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.alto.isEqual(ExitCober),_t_Mutantes.maximo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.alto); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.maximo.isEqual(ExitCober),_t_Mutantes.muybajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.medio); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.maximo.isEqual(ExitCober),_t_Mutantes.bajo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.medio); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.maximo.isEqual(ExitCober),_t_Mutantes.medio.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.medio); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.maximo.isEqual(ExitCober),_t_Mutantes.alto.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.alto); _i_Resultado2++;
  _rl = _op.and(_t_ExitCober.maximo.isEqual(ExitCober),_t_Mutantes.maximo.isEqual(Mutantes));
  Resultado2.set(_i_Resultado2,_rl, _t_Resultado2.maximo); _i_Resultado2++;
  MembershipFunction[] _output = new MembershipFunction[1];
  _output[0] = Resultado2;
  return _output;
 }

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //  Rulebase RL_Rules3  //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 private MembershipFunction[] RL_Rules3(MembershipFunction ExitCoMut, MembershipFunction NumeroTest) {
  double _rl;
  double _input[] = new double[2];
  if(ExitCoMut instanceof FuzzySingleton)
   _input[0] = ((FuzzySingleton) ExitCoMut).getValue();
  if(NumeroTest instanceof FuzzySingleton)
   _input[1] = ((FuzzySingleton) NumeroTest).getValue();
  OP_calidad_1__default_ _op = new OP_calidad_1__default_();
  OutputMembershipFunction Resultado3 = new OutputMembershipFunction();
  Resultado3.set(15,_op,_input);
  TP_calidad_1_Resultado2 _t_ExitCoMut = new TP_calidad_1_Resultado2();
  TP_calidad_1_Numerotest _t_NumeroTest = new TP_calidad_1_Numerotest();
  TP_calidad_1_Resultado3 _t_Resultado3 = new TP_calidad_1_Resultado3();
  int _i_Resultado3=0;
  _rl = _op.and(_t_ExitCoMut.muybajo.isEqual(ExitCoMut),_t_NumeroTest.bajo.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.muybajo); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.muybajo.isEqual(ExitCoMut),_t_NumeroTest.medio.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.muybajo); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.muybajo.isEqual(ExitCoMut),_t_NumeroTest.alto.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.muybajo); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.bajo.isEqual(ExitCoMut),_t_NumeroTest.bajo.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.bajo); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.bajo.isEqual(ExitCoMut),_t_NumeroTest.medio.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.bajo); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.bajo.isEqual(ExitCoMut),_t_NumeroTest.alto.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.muybajo); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.medio.isEqual(ExitCoMut),_t_NumeroTest.bajo.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.medio); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.medio.isEqual(ExitCoMut),_t_NumeroTest.medio.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.medio); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.medio.isEqual(ExitCoMut),_t_NumeroTest.alto.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.medio); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.alto.isEqual(ExitCoMut),_t_NumeroTest.bajo.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.medioAlto); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.alto.isEqual(ExitCoMut),_t_NumeroTest.medio.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.medioAlto); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.alto.isEqual(ExitCoMut),_t_NumeroTest.alto.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.medioAlto); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.maximo.isEqual(ExitCoMut),_t_NumeroTest.bajo.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.medioAlto); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.maximo.isEqual(ExitCoMut),_t_NumeroTest.medio.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.alto); _i_Resultado3++;
  _rl = _op.and(_t_ExitCoMut.maximo.isEqual(ExitCoMut),_t_NumeroTest.alto.isEqual(NumeroTest));
  Resultado3.set(_i_Resultado3,_rl, _t_Resultado3.alto); _i_Resultado3++;
  MembershipFunction[] _output = new MembershipFunction[1];
  _output[0] = Resultado3;
  return _output;
 }

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //  Rulebase RL_Rules4  //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 private MembershipFunction[] RL_Rules4(MembershipFunction Resultado3, MembershipFunction NumeroLineasCodigo) {
  double _rl;
  double _input[] = new double[2];
  if(Resultado3 instanceof FuzzySingleton)
   _input[0] = ((FuzzySingleton) Resultado3).getValue();
  if(NumeroLineasCodigo instanceof FuzzySingleton)
   _input[1] = ((FuzzySingleton) NumeroLineasCodigo).getValue();
  OP_calidad_1__default_ _op = new OP_calidad_1__default_();
  OutputMembershipFunction calidad = new OutputMembershipFunction();
  calidad.set(15,_op,_input);
  TP_calidad_1_Resultado3 _t_Resultado3 = new TP_calidad_1_Resultado3();
  TP_calidad_1_NumeroLineasCodigo _t_NumeroLineasCodigo = new TP_calidad_1_NumeroLineasCodigo();
  TP_calidad_1_CALIDAD _t_calidad = new TP_calidad_1_CALIDAD();
  int _i_calidad=0;
  _rl = _op.and(_t_Resultado3.muybajo.isEqual(Resultado3),_t_NumeroLineasCodigo.bajo.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.muybajo); _i_calidad++;
  _rl = _op.and(_t_Resultado3.muybajo.isEqual(Resultado3),_t_NumeroLineasCodigo.medio.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.muybajo); _i_calidad++;
  _rl = _op.and(_t_Resultado3.muybajo.isEqual(Resultado3),_t_NumeroLineasCodigo.alto.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.muybajo); _i_calidad++;
  _rl = _op.and(_t_Resultado3.bajo.isEqual(Resultado3),_t_NumeroLineasCodigo.bajo.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.bajo); _i_calidad++;
  _rl = _op.and(_t_Resultado3.bajo.isEqual(Resultado3),_t_NumeroLineasCodigo.medio.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.bajo); _i_calidad++;
  _rl = _op.and(_t_Resultado3.bajo.isEqual(Resultado3),_t_NumeroLineasCodigo.alto.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.muybajo); _i_calidad++;
  _rl = _op.and(_t_Resultado3.medio.isEqual(Resultado3),_t_NumeroLineasCodigo.bajo.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.medio); _i_calidad++;
  _rl = _op.and(_t_Resultado3.medio.isEqual(Resultado3),_t_NumeroLineasCodigo.medio.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.medio); _i_calidad++;
  _rl = _op.and(_t_Resultado3.medio.isEqual(Resultado3),_t_NumeroLineasCodigo.alto.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.bajo); _i_calidad++;
  _rl = _op.and(_t_Resultado3.medioAlto.isEqual(Resultado3),_t_NumeroLineasCodigo.bajo.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.medioAlto); _i_calidad++;
  _rl = _op.and(_t_Resultado3.medioAlto.isEqual(Resultado3),_t_NumeroLineasCodigo.medio.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.medioAlto); _i_calidad++;
  _rl = _op.and(_t_Resultado3.medioAlto.isEqual(Resultado3),_t_NumeroLineasCodigo.alto.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.medioAlto); _i_calidad++;
  _rl = _op.and(_t_Resultado3.alto.isEqual(Resultado3),_t_NumeroLineasCodigo.bajo.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.alto); _i_calidad++;
  _rl = _op.and(_t_Resultado3.alto.isEqual(Resultado3),_t_NumeroLineasCodigo.medio.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.alto); _i_calidad++;
  _rl = _op.and(_t_Resultado3.alto.isEqual(Resultado3),_t_NumeroLineasCodigo.alto.isEqual(NumeroLineasCodigo));
  calidad.set(_i_calidad,_rl, _t_calidad.alto); _i_calidad++;
  MembershipFunction[] _output = new MembershipFunction[1];
  _output[0] = calidad;
  return _output;
 }

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //               Fuzzy Inference Engine                //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 public double[] crispInference(double[] _input) {
  MembershipFunction Exito = new FuzzySingleton(_input[0]);
  MembershipFunction Cobertura = new FuzzySingleton(_input[1]);
  MembershipFunction Mutantes = new FuzzySingleton(_input[2]);
  MembershipFunction NumeroTest = new FuzzySingleton(_input[3]);
  MembershipFunction NumeroLineasCodigo = new FuzzySingleton(_input[4]);
  MembershipFunction CALIDAD;
  MembershipFunction i0;
  MembershipFunction i1;
  MembershipFunction i2;
  MembershipFunction[] _call;
  _call = RL_Rules1(Exito,Cobertura); i0=_call[0];
  _call = RL_Rules2(i0,Mutantes); i1=_call[0];
  _call = RL_Rules3(i1,NumeroTest); i2=_call[0];
  _call = RL_Rules4(i2,NumeroLineasCodigo); CALIDAD=_call[0];
  double _output[] = new double[1];
  if(CALIDAD instanceof FuzzySingleton)
   _output[0] = ((FuzzySingleton) CALIDAD).getValue();
  else _output[0] = ((OutputMembershipFunction) CALIDAD).defuzzify();
  return _output;
 }

 public double[] crispInference(MembershipFunction[] _input) {
  MembershipFunction Exito = _input[0];
  MembershipFunction Cobertura = _input[1];
  MembershipFunction Mutantes = _input[2];
  MembershipFunction NumeroTest = _input[3];
  MembershipFunction NumeroLineasCodigo = _input[4];
  MembershipFunction CALIDAD;
  MembershipFunction i0;
  MembershipFunction i1;
  MembershipFunction i2;
  MembershipFunction[] _call;
  _call = RL_Rules1(Exito,Cobertura); i0=_call[0];
  _call = RL_Rules2(i0,Mutantes); i1=_call[0];
  _call = RL_Rules3(i1,NumeroTest); i2=_call[0];
  _call = RL_Rules4(i2,NumeroLineasCodigo); CALIDAD=_call[0];
  double _output[] = new double[1];
  if(CALIDAD instanceof FuzzySingleton)
   _output[0] = ((FuzzySingleton) CALIDAD).getValue();
  else _output[0] = ((OutputMembershipFunction) CALIDAD).defuzzify();
  return _output;
 }

 public MembershipFunction[] fuzzyInference(double[] _input) {
  MembershipFunction Exito = new FuzzySingleton(_input[0]);
  MembershipFunction Cobertura = new FuzzySingleton(_input[1]);
  MembershipFunction Mutantes = new FuzzySingleton(_input[2]);
  MembershipFunction NumeroTest = new FuzzySingleton(_input[3]);
  MembershipFunction NumeroLineasCodigo = new FuzzySingleton(_input[4]);
  MembershipFunction CALIDAD;
  MembershipFunction i0;
  MembershipFunction i1;
  MembershipFunction i2;
  MembershipFunction[] _call;
  _call = RL_Rules1(Exito,Cobertura); i0=_call[0];
  _call = RL_Rules2(i0,Mutantes); i1=_call[0];
  _call = RL_Rules3(i1,NumeroTest); i2=_call[0];
  _call = RL_Rules4(i2,NumeroLineasCodigo); CALIDAD=_call[0];
  MembershipFunction _output[] = new MembershipFunction[1];
  _output[0] = CALIDAD;
  return _output;
 }

 public MembershipFunction[] fuzzyInference(MembershipFunction[] _input) {
  MembershipFunction Exito = _input[0];
  MembershipFunction Cobertura = _input[1];
  MembershipFunction Mutantes = _input[2];
  MembershipFunction NumeroTest = _input[3];
  MembershipFunction NumeroLineasCodigo = _input[4];
  MembershipFunction CALIDAD;
  MembershipFunction i0;
  MembershipFunction i1;
  MembershipFunction i2;
  MembershipFunction[] _call;
  _call = RL_Rules1(Exito,Cobertura); i0=_call[0];
  _call = RL_Rules2(i0,Mutantes); i1=_call[0];
  _call = RL_Rules3(i1,NumeroTest); i2=_call[0];
  _call = RL_Rules4(i2,NumeroLineasCodigo); CALIDAD=_call[0];
  MembershipFunction _output[] = new MembershipFunction[1];
  _output[0] = CALIDAD;
  return _output;
 }

}

