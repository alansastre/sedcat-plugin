//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//                                                      //
// Class:  pruebaCALIDAD2                           //
//                                                      //
// Author: Automatically generated by Xfuzzy            //
//                                                      //
// Description: Fuzzy inference engine "pruebaCALIDAD2"       //
//                                                      //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package es.unileon.sonarqube.sedcat.xfuzzy;

public class pruebaCALIDAD2 implements FuzzyInferenceEngine {

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //  Rulebase RL_qualityRules  //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 private MembershipFunction[] RL_qualityRules(MembershipFunction exito, MembershipFunction cobertura) {
  double _rl;
  double _input[] = new double[2];
  if(exito instanceof FuzzySingleton)
   _input[0] = ((FuzzySingleton) exito).getValue();
  if(cobertura instanceof FuzzySingleton)
   _input[1] = ((FuzzySingleton) cobertura).getValue();
  OP_pruebaCALIDAD2_operatorSetprueba _op = new OP_pruebaCALIDAD2_operatorSetprueba();
  OutputMembershipFunction calidad = new OutputMembershipFunction();
  calidad.set(16,_op,_input);
  TP_pruebaCALIDAD2_Exito _t_exito = new TP_pruebaCALIDAD2_Exito();
  TP_pruebaCALIDAD2_Cobertura _t_cobertura = new TP_pruebaCALIDAD2_Cobertura();
  TP_pruebaCALIDAD2_CalidadTotal _t_calidad = new TP_pruebaCALIDAD2_CalidadTotal();
  int _i_calidad=0;
  _rl = _op.and(_t_exito.Bajo.isEqual(exito),_t_cobertura.Bajo.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Bajo); _i_calidad++;
  _rl = _op.and(_t_exito.Bajo.isEqual(exito),_t_cobertura.Medio.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Bajo); _i_calidad++;
  _rl = _op.and(_t_exito.Bajo.isEqual(exito),_t_cobertura.medioAlto.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Medio); _i_calidad++;
  _rl = _op.and(_t_exito.Bajo.isEqual(exito),_t_cobertura.Alto.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.medioAlto); _i_calidad++;
  _rl = _op.and(_t_exito.Medio.isEqual(exito),_t_cobertura.Bajo.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Bajo); _i_calidad++;
  _rl = _op.and(_t_exito.Medio.isEqual(exito),_t_cobertura.Medio.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Medio); _i_calidad++;
  _rl = _op.and(_t_exito.Medio.isEqual(exito),_t_cobertura.medioAlto.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Medio); _i_calidad++;
  _rl = _op.and(_t_exito.Medio.isEqual(exito),_t_cobertura.Alto.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.medioAlto); _i_calidad++;
  _rl = _op.and(_t_exito.medioAlto.isEqual(exito),_t_cobertura.Bajo.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Bajo); _i_calidad++;
  _rl = _op.and(_t_exito.medioAlto.isEqual(exito),_t_cobertura.Medio.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Medio); _i_calidad++;
  _rl = _op.and(_t_exito.medioAlto.isEqual(exito),_t_cobertura.medioAlto.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.medioAlto); _i_calidad++;
  _rl = _op.and(_t_exito.medioAlto.isEqual(exito),_t_cobertura.Alto.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.medioAlto); _i_calidad++;
  _rl = _op.and(_t_exito.Alto.isEqual(exito),_t_cobertura.Bajo.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Bajo); _i_calidad++;
  _rl = _op.and(_t_exito.Alto.isEqual(exito),_t_cobertura.Medio.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Medio); _i_calidad++;
  _rl = _op.and(_t_exito.Alto.isEqual(exito),_t_cobertura.medioAlto.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.medioAlto); _i_calidad++;
  _rl = _op.and(_t_exito.Alto.isEqual(exito),_t_cobertura.Alto.isEqual(cobertura));
  calidad.set(_i_calidad,_rl, _t_calidad.Alto); _i_calidad++;
  MembershipFunction[] _output = new MembershipFunction[1];
  _output[0] = calidad;
  return _output;
 }

 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//
 //               Fuzzy Inference Engine                //
 //+++++++++++++++++++++++++++++++++++++++++++++++++++++//

 public double[] crispInference(double[] _input) {
  MembershipFunction exito1 = new FuzzySingleton(_input[0]);
  MembershipFunction cobertura1 = new FuzzySingleton(_input[1]);
  MembershipFunction calidadfinal;
  MembershipFunction[] _call;
  _call = RL_qualityRules(exito1,cobertura1); calidadfinal=_call[0];
  double _output[] = new double[1];
  if(calidadfinal instanceof FuzzySingleton)
   _output[0] = ((FuzzySingleton) calidadfinal).getValue();
  else _output[0] = ((OutputMembershipFunction) calidadfinal).defuzzify();
  return _output;
 }

 public double[] crispInference(MembershipFunction[] _input) {
  MembershipFunction exito1 = _input[0];
  MembershipFunction cobertura1 = _input[1];
  MembershipFunction calidadfinal;
  MembershipFunction[] _call;
  _call = RL_qualityRules(exito1,cobertura1); calidadfinal=_call[0];
  double _output[] = new double[1];
  if(calidadfinal instanceof FuzzySingleton)
   _output[0] = ((FuzzySingleton) calidadfinal).getValue();
  else _output[0] = ((OutputMembershipFunction) calidadfinal).defuzzify();
  return _output;
 }

 public MembershipFunction[] fuzzyInference(double[] _input) {
  MembershipFunction exito1 = new FuzzySingleton(_input[0]);
  MembershipFunction cobertura1 = new FuzzySingleton(_input[1]);
  MembershipFunction calidadfinal;
  MembershipFunction[] _call;
  _call = RL_qualityRules(exito1,cobertura1); calidadfinal=_call[0];
  MembershipFunction _output[] = new MembershipFunction[1];
  _output[0] = calidadfinal;
  return _output;
 }

 public MembershipFunction[] fuzzyInference(MembershipFunction[] _input) {
  MembershipFunction exito1 = _input[0];
  MembershipFunction cobertura1 = _input[1];
  MembershipFunction calidadfinal;
  MembershipFunction[] _call;
  _call = RL_qualityRules(exito1,cobertura1); calidadfinal=_call[0];
  MembershipFunction _output[] = new MembershipFunction[1];
  _output[0] = calidadfinal;
  return _output;
 }

}

