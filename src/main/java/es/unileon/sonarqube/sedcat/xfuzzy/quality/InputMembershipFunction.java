//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//                                                      //
// Class:  InputMembershipFunction                      //
//                                                      //
// Author: Automatically generated by Xfuzzy            //
//                                                      //
// Description: Membership function of an input         //
//              variable                                //
//                                                      //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package es.unileon.sonarqube.sedcat.xfuzzy.quality;

public abstract class InputMembershipFunction {
 double min;
 double max;
 double step;

 public double center() {
  return 0;
 }

 public double basis() {
  return 0;
 }

 public abstract double param(int i);

 public abstract double isEqual(double x);

 public double isSmallerOrEqual(double x) {
  double degree=0, mu;
  for(double y=max; y>=x ; y-=step) if((mu = isEqual(y))>degree) degree=mu;
  return degree;
 }

 public double isGreaterOrEqual(double x) {
   double degree=0, mu;
   for(double y=min; y<=x ; y+=step) if((mu = isEqual(y))>degree) degree=mu;
   return degree;
  }

 public double isEqual(MembershipFunction mf) {
  if(mf instanceof FuzzySingleton)
   { return isEqual( ((FuzzySingleton) mf).getValue()); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = isEqual(val[i][0]);
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,degree=0;
  for(double x=min; x<=max; x+=step){
   mu1 = mf.compute(x);
   mu2 = isEqual(x);
   minmu = (mu1<mu2 ? mu1 : mu2);
   if( degree<minmu ) degree = minmu;
  }
  return degree;
  }

 public double isGreaterOrEqual(MembershipFunction mf) {
  if(mf instanceof FuzzySingleton)
   { return isGreaterOrEqual( ((FuzzySingleton) mf).getValue()); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = isGreaterOrEqual(val[i][0]);
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,degree=0,greq=0;
  for(double x=min; x<=max; x+=step){
   mu1 = mf.compute(x);
   mu2 = isEqual(x);
   if( mu2>greq ) greq = mu2;
   if( mu1<greq ) minmu = mu1; else minmu = greq;
   if( degree<minmu ) degree = minmu;
  }
  return degree;
 }

 public double isSmallerOrEqual(MembershipFunction mf) {
  if(mf instanceof FuzzySingleton)
   { return isSmallerOrEqual( ((FuzzySingleton) mf).getValue()); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = isSmallerOrEqual(val[i][0]);
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,degree=0,smeq=0;
  for(double x=max; x>=min; x-=step){
   mu1 = mf.compute(x);
   mu2 = isEqual(x);
   if( mu2>smeq ) smeq = mu2;
   if( mu1<smeq ) minmu = mu1; else minmu = smeq;
   if( degree<minmu ) degree = minmu;
  }
  return degree;
 }

 public double isGreater(MembershipFunction mf, OperatorSet op) {
  if(mf instanceof FuzzySingleton)
   { return op.not(isSmallerOrEqual( ((FuzzySingleton) mf).getValue())); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = op.not(isSmallerOrEqual(val[i][0]));
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,gr,degree=0,smeq=0;
  for(double x=max; x>=min; x-=step){
   mu1 = mf.compute(x);
   mu2 = isEqual(x);
   if( mu2>smeq ) smeq = mu2;
   gr = op.not(smeq);
   minmu = ( mu1<gr ? mu1 : gr);
   if( degree<minmu ) degree = minmu;
  }
  return degree;
 }

 public double isSmaller(MembershipFunction mf, OperatorSet op) {
  if(mf instanceof FuzzySingleton)
   { return op.not(isGreaterOrEqual( ((FuzzySingleton) mf).getValue())); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = op.not(isGreaterOrEqual(val[i][0]));
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,sm,degree=0,greq=0;
  for(double x=min; x<=max; x+=step){
   mu1 = mf.compute(x);
   mu2 = isEqual(x);
   if( mu2>greq ) greq = mu2;
   sm = op.not(greq);
   minmu = ( mu1<sm ? mu1 : sm);
   if( degree<minmu ) degree = minmu;
  }
  return degree;
 }

 public double isNotEqual(MembershipFunction mf, OperatorSet op) {
  if(mf instanceof FuzzySingleton)
   { return op.not(isEqual( ((FuzzySingleton) mf).getValue())); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = op.not(isEqual(val[i][0]));
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,degree=0;
  for(double x=min; x<=max; x+=step){
   mu1 = mf.compute(x);
   mu2 = op.not(isEqual(x));
   minmu = (mu1<mu2 ? mu1 : mu2);
   if( degree<minmu ) degree = minmu;
  }
 return degree;
 }

 public double isApproxEqual(MembershipFunction mf, OperatorSet op) {
  if(mf instanceof FuzzySingleton)
   { return op.moreorless(isEqual( ((FuzzySingleton) mf).getValue())); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = op.moreorless(isEqual(val[i][0]));
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,degree=0;
  for(double x=min; x<=max; x+=step){
   mu1 = mf.compute(x);
   mu2 = op.moreorless(isEqual(x));
   minmu = (mu1<mu2 ? mu1 : mu2);
   if( degree<minmu ) degree = minmu;
  }
  return degree;
 }

 public double isVeryEqual(MembershipFunction mf, OperatorSet op) {
  if(mf instanceof FuzzySingleton)
   { return op.very(isEqual( ((FuzzySingleton) mf).getValue())); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = op.very(isEqual(val[i][0]));
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,degree=0;
  for(double x=min; x<=max; x+=step){
   mu1 = mf.compute(x);
   mu2 = op.very(isEqual(x));
   minmu = (mu1<mu2 ? mu1 : mu2);
   if( degree<minmu ) degree = minmu;
  }
  return degree;
 }

 public double isSlightlyEqual(MembershipFunction mf, OperatorSet op) {
  if(mf instanceof FuzzySingleton)
   { return op.slightly(isEqual( ((FuzzySingleton) mf).getValue())); }
  if((mf instanceof OutputMembershipFunction) &&
     ((OutputMembershipFunction) mf).isDiscrete() ) {
   double[][] val = ((OutputMembershipFunction) mf).getDiscreteValues();
   double deg = 0;
   for(int i=0; i<val.length; i++){
    double mu = op.slightly(isEqual(val[i][0]));
    double minmu = (mu<val[i][1] ? mu : val[i][1]);
    if( deg<minmu ) deg = minmu;
   }
   return deg;
  }
  double mu1,mu2,minmu,degree=0;
  for(double x=min; x<=max; x+=step){
   mu1 = mf.compute(x);
   mu2 = op.slightly(isEqual(x));
   minmu = (mu1<mu2 ? mu1 : mu2);
   if( degree<minmu ) degree = minmu;
  }
  return degree;
 }
}
